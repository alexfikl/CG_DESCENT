The MATLAB mex routines cg_descent and cg_default are compiled by
typing make in the directory containing this README file.
It is assumed that the cg_descent code is stored one directory level
higher.  The most general usage of the code is as follows:

[y, status, Stat] = cg_descent (x, tol, @myvalue, @mygrad, @myvalgrad, Parm)

where

Inputs:
    x          = initial guess for solution (length of x is taken as the
                     problem dimension)
    tol        = convergence tolerance for infinity norm of gradient
    @myvalue   = function handle for MATLAB routine to evaluate function
    @mygrad    = function handle for MATLAB routine to evaluate gradient
    @myvalgrad = function handle for MATLAB routine to evaluate function
                     and gradient (optional)
    Parm       = structure for containing input parameters (optional)

Outputs:
    y          = solution (optional)
    status     = integer status returned by cg_descent (optional)
    Stat       = structure containing algorithm statistics (optional)

The first 4 input arguments (x, tol, @myvalue, and @mygrad) are required
and need to be appear in this order. The last 2 input arguments
(@myvalgrad and Parm) are optional. Either or both can be omitted and
they can appear in any order. The output arguments are optional. If
none are given, then MATLAB displays y when the semicolon at the end of
the line is omitted. When 1 or 2 or 3 output arguments are given,
they need to be in the order of y followed by status followed by Stat.
If you wish to change the parameter values, then first initialize
a parameter structure to its default values, and then make changes
to the structure values as in the example below:

    Parm = cg_default ;
    Parm.PrintLevel = 2 ;

This value for the PrintLevel generates lots of printing.
The MATLAB files driver1.m, driver2.m, ... , driver5.m illustrate usage.
Here are several examples of usage:

    x = cg_descent (x, tol, @myvalue, @mygrad) ;
    x = cg_descent (x, tol, @myvalue, @mygrad, @myvalgrad)
    [x,status] = cg_descent (x, tol, @myvalue, @mygrad) ;
    [x,status, Stat] = cg_descent (x, tol, @myvalue, @mygrad) ;
    x = cg_descent ( x, tol, @myvalue, @mygrad)
    [x,status] = cg_descent ( x, tol, @myvalue, @mygrad)
    [x,status, Stat] = cg_descent ( x, tol, @myvalue, @mygrad)
    x = cg_descent ( x, tol, @myvalue, @mygrad, @myvalgrad)
    [x,status] = cg_descent ( x, tol, @myvalue, @mygrad, @myvalgrad)
    [x,status, Stat] = cg_descent ( x, tol, @myvalue, @mygrad,@myvalgrad)
    x = cg_descent ( x, tol, @myvalue, @mygrad, Parm)
    [x,status] = cg_descent ( x, tol, @myvalue, @mygrad, Parm)
    [x,status, Stat] = cg_descent ( x, tol, @myvalue, @mygrad, Parm)
    x = cg_descent ( x, tol, @myvalue, @mygrad, @myvalgrad, Parm)
    [x, status] = cg_descent ( x, tol, @myvalue, @mygrad, @myvalgrad, Parm)
    [x, status, Stat] = cg_descent ( x, tol, @myvalue, @mygrad,@myvalgrad, Parm)

The first examples use the default parameters. status = 0 means that
the error tolerance was achieved. See the comments for cg_descent.c for
a summary of the values of status and their meaning.  A description
of the Stat structure is found in cg_user.h.
