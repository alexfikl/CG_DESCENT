The easiest way to incorporate cg_descent in CUTEr is to go
one directory level higher and type cg_cuter_install. This works
if your version of CUTEr is pre-CUTEr2. The manual procedure for
installing cg_descent in CUTEr is the following:

1. Put cg_user.h into $CUTER/common/include
2. Put cg_descentma.c into $CUTER/common/src/tools
3. In $CUTER/common/src/tools, "gcc -lm -O3 -c cg_descentma.c"
4. "cp cg_descentma.o $MYCUTER/double/bin"
5. In the directory where you put cg_descent, type "make" and then
   "cp cg_descent.o $MYCUTER/double/bin"
6. "cp cg_descent.pro sdcg_descent.pro $CUTER/build/prototypes"
7. "cd $MYCUTER/bin"
8. type the following command twice:

sed -f $MYCUTER/double/config/script.sed $CUTER/build/prototypes/pack.pro > pack

where "pack" is first "cg_descent" and then "sdcg_descent"

9. "chmod a+x cg_descent sdcg_descent"
10. rehash

You can solve a problem by cd'ing to the directory where the sif files
are stored and typing sdcg_descent followed by the problem name.

To use the BLAS with cg_descent, edit the cg_blas.h as explained in the
README file one directory level higher. Also, you need to add "-lpthread"
to the end of the LOAD statement found towards the end of the program
$MYCUTER/bin/runpackage. Moreover, when you solve a problem using
cg_descent, the statement has the following form (if you BLAS are the
goto2 BLAS and you wish to solve the test problem AKIVA):
sdcg_descent --blas -lgoto2 AKIVA

NOTE: to run valgrind with the code, edit "$MYCUTER/bin/runpackage" as follows:
near the end of the program, change "$EXEC/${PAC}min" to
"valgrind $EXEC/${PAC}min"
